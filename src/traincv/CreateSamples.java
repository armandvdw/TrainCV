/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package traincv;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;

/**
 *
 * @author TheOnlyMonkey
 */
public class CreateSamples extends javax.swing.JFrame {

    public Command cvComm;
    public File workingDirectory = new File("C:\\dev");
    public File vectorFile;

    /**
     * Creates new form TrainingWindow
     */
    public CreateSamples() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbVector = new javax.swing.JCheckBox();
        cbBackground = new javax.swing.JCheckBox();
        cbNumSamples = new javax.swing.JCheckBox();
        cbBgColor = new javax.swing.JCheckBox();
        cbBgThresh = new javax.swing.JCheckBox();
        radioImage = new javax.swing.JRadioButton();
        txtimage = new javax.swing.JTextField();
        btnRun = new javax.swing.JButton();
        cbInvertColors = new javax.swing.JCheckBox();
        cbRandomInvertColors = new javax.swing.JCheckBox();
        cbMaxIntensityDeviation = new javax.swing.JCheckBox();
        cbMaxXAngle = new javax.swing.JCheckBox();
        cbMaxYAngle = new javax.swing.JCheckBox();
        cbMaxZAngle = new javax.swing.JCheckBox();
        cbShow = new javax.swing.JCheckBox();
        cbWidth = new javax.swing.JCheckBox();
        cbHeight = new javax.swing.JCheckBox();
        txtVector = new javax.swing.JTextField();
        txtBackground = new javax.swing.JTextField();
        txtNumSamples = new javax.swing.JTextField();
        txtBgColor = new javax.swing.JTextField();
        txtBgThresh = new javax.swing.JTextField();
        txtInvertColors = new javax.swing.JTextField();
        txtRandomInvertColors = new javax.swing.JTextField();
        txtMaxIntensityDeviation = new javax.swing.JTextField();
        txtWidth = new javax.swing.JTextField();
        txtHeight = new javax.swing.JTextField();
        txtShow = new javax.swing.JTextField();
        txtXAngle = new javax.swing.JTextField();
        txtYAngle = new javax.swing.JTextField();
        txtZAngle = new javax.swing.JTextField();
        btnGenerateCommand = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaCommand = new javax.swing.JTextArea();
        btnImageVideoFileChooser = new javax.swing.JButton();
        btnVectorFileChooser = new javax.swing.JButton();
        btnBackgroundFileChooser = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setTitle("Create Samples");

        cbVector.setText("Vector File");
        cbVector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVectorActionPerformed(evt);
            }
        });

        cbBackground.setText("Background");

        cbNumSamples.setText("Number of Samples");

        cbBgColor.setText("Background Color");

        cbBgThresh.setText("Background Threshold");

        radioImage.setText("Image");
        radioImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioImageActionPerformed(evt);
            }
        });

        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        cbInvertColors.setText("Invert Colors");

        cbRandomInvertColors.setText("Random Invert Colors");
        cbRandomInvertColors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRandomInvertColorsActionPerformed(evt);
            }
        });

        cbMaxIntensityDeviation.setText("Max Intensity Deviation");

        cbMaxXAngle.setText("Max X Angle");

        cbMaxYAngle.setText("Max Y Angle");

        cbMaxZAngle.setText("Max Z Angle");

        cbShow.setText("Show");

        cbWidth.setText("Width");

        cbHeight.setText("Height");

        btnGenerateCommand.setText("Generate ");
        btnGenerateCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateCommandActionPerformed(evt);
            }
        });

        txtAreaCommand.setColumns(20);
        txtAreaCommand.setRows(5);
        jScrollPane1.setViewportView(txtAreaCommand);

        btnImageVideoFileChooser.setText("...");
        btnImageVideoFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImageVideoFileChooserActionPerformed(evt);
            }
        });

        btnVectorFileChooser.setText("...");
        btnVectorFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVectorFileChooserActionPerformed(evt);
            }
        });

        btnBackgroundFileChooser.setText("...");
        btnBackgroundFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackgroundFileChooserActionPerformed(evt);
            }
        });

        jLabel1.setText("Createsamples");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerateCommand)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbRandomInvertColors)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRandomInvertColors, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbVector)
                                    .addComponent(radioImage))
                                .addGap(58, 58, 58)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtVector, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                    .addComponent(txtimage)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbBgColor)
                                    .addComponent(cbBgThresh)
                                    .addComponent(cbInvertColors)
                                    .addComponent(cbBackground)
                                    .addComponent(cbNumSamples))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtInvertColors, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                    .addComponent(txtBgThresh)
                                    .addComponent(txtBgColor, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtNumSamples, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtBackground, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnImageVideoFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnBackgroundFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnVectorFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbMaxIntensityDeviation)
                                .addGap(18, 18, 18)
                                .addComponent(txtMaxIntensityDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbMaxXAngle)
                                    .addComponent(cbMaxYAngle)
                                    .addComponent(cbMaxZAngle)
                                    .addComponent(cbHeight)
                                    .addComponent(cbShow)
                                    .addComponent(cbWidth))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtXAngle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtShow, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtYAngle, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtZAngle, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtHeight, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(93, 93, 93))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRun)
                        .addGap(202, 202, 202))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbVector)
                                    .addComponent(txtVector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnVectorFileChooser))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbBackground)
                                    .addComponent(txtBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnBackgroundFileChooser))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbNumSamples)
                                    .addComponent(txtNumSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbBgColor)
                                    .addComponent(txtBgColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbBgThresh)
                                    .addComponent(txtBgThresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbInvertColors)
                                    .addComponent(txtInvertColors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbRandomInvertColors)
                                    .addComponent(txtRandomInvertColors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtimage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnImageVideoFileChooser)
                                    .addComponent(radioImage))))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGenerateCommand)
                            .addComponent(btnRun)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbMaxIntensityDeviation)
                            .addComponent(txtMaxIntensityDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbMaxXAngle)
                            .addComponent(txtXAngle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbMaxYAngle)
                            .addComponent(txtYAngle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbMaxZAngle)
                            .addComponent(txtZAngle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbShow)
                            .addComponent(txtShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbWidth)
                            .addComponent(txtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbHeight)
                            .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioImageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioImageActionPerformed

    private void cbVectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbVectorActionPerformed

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        System.out.println("running command");
        String result = this.executeCommand(this.txtAreaCommand.getText());
        System.out.println(result);
    }//GEN-LAST:event_btnRunActionPerformed

    private void cbRandomInvertColorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRandomInvertColorsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbRandomInvertColorsActionPerformed

    private void btnGenerateCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateCommandActionPerformed
        // TODO add y  our handling code here:
        this.opencvCreateSamples();
    }//GEN-LAST:event_btnGenerateCommandActionPerformed

    private void btnImageVideoFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImageVideoFileChooserActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(workingDirectory.getAbsolutePath());
        int r = fc.showOpenDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            this.txtimage.setText(f.getAbsolutePath());
        }
    }//GEN-LAST:event_btnImageVideoFileChooserActionPerformed

    private void btnVectorFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVectorFileChooserActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(this.workingDirectory.getAbsolutePath());
        int r = fc.showOpenDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            this.txtVector.setText(f.getAbsolutePath());
        }
    }//GEN-LAST:event_btnVectorFileChooserActionPerformed

    private void btnBackgroundFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackgroundFileChooserActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(this.workingDirectory.getAbsolutePath());
        int r = fc.showOpenDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            this.txtBackground.setText(f.getAbsolutePath());
        }
    }//GEN-LAST:event_btnBackgroundFileChooserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateSamples.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateSamples.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateSamples.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateSamples.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateSamples().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackgroundFileChooser;
    private javax.swing.JButton btnGenerateCommand;
    private javax.swing.JButton btnImageVideoFileChooser;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnVectorFileChooser;
    private javax.swing.JCheckBox cbBackground;
    private javax.swing.JCheckBox cbBgColor;
    private javax.swing.JCheckBox cbBgThresh;
    private javax.swing.JCheckBox cbHeight;
    private javax.swing.JCheckBox cbInvertColors;
    private javax.swing.JCheckBox cbMaxIntensityDeviation;
    private javax.swing.JCheckBox cbMaxXAngle;
    private javax.swing.JCheckBox cbMaxYAngle;
    private javax.swing.JCheckBox cbMaxZAngle;
    private javax.swing.JCheckBox cbNumSamples;
    private javax.swing.JCheckBox cbRandomInvertColors;
    private javax.swing.JCheckBox cbShow;
    private javax.swing.JCheckBox cbVector;
    private javax.swing.JCheckBox cbWidth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radioImage;
    private javax.swing.JTextArea txtAreaCommand;
    private javax.swing.JTextField txtBackground;
    private javax.swing.JTextField txtBgColor;
    private javax.swing.JTextField txtBgThresh;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtInvertColors;
    private javax.swing.JTextField txtMaxIntensityDeviation;
    private javax.swing.JTextField txtNumSamples;
    private javax.swing.JTextField txtRandomInvertColors;
    private javax.swing.JTextField txtShow;
    private javax.swing.JTextField txtVector;
    private javax.swing.JTextField txtWidth;
    private javax.swing.JTextField txtXAngle;
    private javax.swing.JTextField txtYAngle;
    private javax.swing.JTextField txtZAngle;
    private javax.swing.JTextField txtimage;
    // End of variables declaration//GEN-END:variables

    public void opencvCreateSamples() {
        this.getSelectedSamples();
        this.txtAreaCommand.setText(this.cvComm.cmd);
        this.txtAreaCommand.setWrapStyleWord(true);
    }

    public void getSelectedSamples() {
        this.cvComm = new Command("opencv_createsamples ");
        CvComm c = new CvComm();

        if (this.cbBgColor.isSelected()) {
            String val = txtBgColor.getText();
            this.cvComm.addParam(c.bgColor.setVal(val));
        }
        if (this.cbBackground.isSelected()) {
            String val = txtBackground.getText();
            this.cvComm.addParam(c.bacground.setVal(val));
        }
        if (this.cbBgThresh.isSelected()) {
            String val = txtBgThresh.getText();
        }
        if (this.cbHeight.isSelected()) {
            String val = txtHeight.getText();
            this.cvComm.addParam(c.height.setVal(val));
        }
        if (this.cbWidth.isSelected()) {
            String val = txtWidth.getText();
            this.cvComm.addParam(c.width.setVal(val));
        }
        if (this.cbInvertColors.isSelected()) {
            String val = txtInvertColors.getText();
            this.cvComm.addParam(c.invert.setVal(val));
        }
        if (this.cbMaxIntensityDeviation.isSelected()) {
            String val = txtMaxIntensityDeviation.getText();
        }
        if (this.cbMaxXAngle.isSelected()) {
            String val = txtXAngle.getText();
            this.cvComm.addParam(c.maxxangle.setVal(val));
        }
        if (this.cbMaxYAngle.isSelected()) {
            String val = txtYAngle.getText();
            this.cvComm.addParam(c.maxyangle.setVal(val));
        }
        if (this.cbMaxZAngle.isSelected()) {
            String val = txtZAngle.getText();
            this.cvComm.addParam(c.maxzangle.setVal(val));
        }
        if (this.cbNumSamples.isSelected()) {
            String val = txtNumSamples.getText();
            this.cvComm.addParam(c.numSamples.setVal(val));
        }
        if (this.cbShow.isSelected()) {
            String val = txtShow.getText();
            this.cvComm.addParam(c.show.setVal(val));
        }
        if (this.cbVector.isSelected()) {
            String val = txtVector.getText();
            this.cvComm.addParam(c.vector.setVal(val));
        }
        if (this.cbRandomInvertColors.isSelected()) {
            String val = txtRandomInvertColors.getText();
        }
        
        if (this.radioImage.isSelected()) {
            String val = txtimage.getText();
            if (val.contains(".info")) {
                this.cvComm.addParam(c.info.setVal(val));
            } else {
                this.cvComm.addParam(c.image.setVal(val));
            }
        }
    }

    class ComParam {

        String param;
        String value;

        public ComParam(String param, String value) {
            this.param = param;
            this.value = value;
        }

        public String toString() {
            return " " + this.param + " " + this.value;
        }

        public ComParam setVal(String val) {
            this.value = val;
            return this;
        }
    }

    class Command {

        String cmd;

        public Command(String command) {
            this.cmd = command;
        }

        public Command() {
        }

        public Command addParam(ComParam param) {
            if (param != null) {
                this.cmd = this.cmd + param.toString();
                return this;
            }
            return null;
        }
    }

    class CvComm {

        ComParam vector = new ComParam("-vec", "");
        ComParam info = new ComParam("-info", "");
        ComParam image = new ComParam("-img", "");
        ComParam bacground = new ComParam("-bg", "");
        ComParam numSamples = new ComParam("-num", "");
        ComParam bgColor = new ComParam("-bgcolor", "");
        ComParam show = new ComParam("-show", "");
        ComParam invert = new ComParam("-inv", "");
        ComParam maxidev = new ComParam("-maxidev", "");
        ComParam maxxangle = new ComParam("-maxxangle", "");
        ComParam maxyangle = new ComParam("-maxyangle", "");
        ComParam maxzangle = new ComParam("-maxzangle", "");
        ComParam width = new ComParam("-w", "");
        ComParam height = new ComParam("-h", "");
    }

    private String executeCommand(String command) {

        StringBuffer output = new StringBuffer();

        Process p;
        try {
            p = Runtime.getRuntime().exec(command);
            p.waitFor();
            BufferedReader reader
                    = new BufferedReader(new InputStreamReader(p.getInputStream()));

            String line = "";
            this.txtAreaCommand.append("\n ============================ \nCommand Output: \n ============================ \n");
            while ((line = reader.readLine()) != null) {
                this.txtAreaCommand.append(line + "\n");
                output.append(line + "\n");
            }
            this.txtAreaCommand.append("============================");

        } catch (Exception e) {
            e.printStackTrace();
        }
        this.vectorFile = new File(txtVector.getText());

        return output.toString();
    }

    public File getVectorFile() {
        return this.vectorFile;
    }
}
