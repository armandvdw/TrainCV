/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package traincv;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author armandw
 */
public class TrainCascade extends javax.swing.JFrame {

    public Command cvCommand;
    public File workingDirectory = new File("c:\\dev");

    /**
     * Creates new form TrainCascade
     */
    public TrainCascade() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbData = new javax.swing.JCheckBox();
        cbVector = new javax.swing.JCheckBox();
        cbBackground = new javax.swing.JCheckBox();
        cbNumberPos = new javax.swing.JCheckBox();
        cbNumberNeg = new javax.swing.JCheckBox();
        cbNumberStages = new javax.swing.JCheckBox();
        cbPrecalcValBufSize = new javax.swing.JCheckBox();
        cbPrecalcIdxBufSize = new javax.swing.JCheckBox();
        cbBaseFormatSave = new javax.swing.JCheckBox();
        cbStageType = new javax.swing.JCheckBox();
        cbFeatureType = new javax.swing.JCheckBox();
        cbWidth = new javax.swing.JCheckBox();
        cbHeight = new javax.swing.JCheckBox();
        cbBt = new javax.swing.JCheckBox();
        cbMinHitRate = new javax.swing.JCheckBox();
        cbMaxFalseAlarmRate = new javax.swing.JCheckBox();
        cbWeightTrimRate = new javax.swing.JCheckBox();
        cbMaxDepth = new javax.swing.JCheckBox();
        cbMaxWeakCount = new javax.swing.JCheckBox();
        cbMode = new javax.swing.JCheckBox();
        txtData = new javax.swing.JTextField();
        txtVector = new javax.swing.JTextField();
        txtBackground = new javax.swing.JTextField();
        txtNumberPos = new javax.swing.JTextField();
        txtNumberNeg = new javax.swing.JTextField();
        txtNumberStages = new javax.swing.JTextField();
        txtPrecalcValBufSize = new javax.swing.JTextField();
        txtPrecalcIdxBufSize = new javax.swing.JTextField();
        txtBaseFormatSave = new javax.swing.JTextField();
        txtStageType = new javax.swing.JTextField();
        txtFeatureType = new javax.swing.JTextField();
        txtWidth = new javax.swing.JTextField();
        txtHeight = new javax.swing.JTextField();
        txtBT = new javax.swing.JTextField();
        txtMinHitRate = new javax.swing.JTextField();
        txtMaxFalseAlarmRate = new javax.swing.JTextField();
        txtWeightTrimRate = new javax.swing.JTextField();
        txtMaxDepth = new javax.swing.JTextField();
        txtMaxWeakCount = new javax.swing.JTextField();
        txtMode = new javax.swing.JTextField();
        btnGenerateCommand = new javax.swing.JButton();
        btnRunCommand = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaCommandOutput = new javax.swing.JTextArea();
        btnDataFileChooser = new javax.swing.JButton();
        btnVectorFileChooser = new javax.swing.JButton();
        btnBackgroundFileChooser = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setTitle("TrainCascade");
        setName("TrainCascade"); // NOI18N

        cbData.setText("Data");

        cbVector.setText("Vector");

        cbBackground.setText("Background");

        cbNumberPos.setText("Numper Positives");

        cbNumberNeg.setText("Number Negatives");

        cbNumberStages.setText("Number Stages");

        cbPrecalcValBufSize.setText("PrecalcValBufSize");

        cbPrecalcIdxBufSize.setText("PrecalcIdxBufSize");

        cbBaseFormatSave.setText("BaseFormatSave");

        cbStageType.setText("StageType");

        cbFeatureType.setText("FeatureType");

        cbWidth.setText("Width");

        cbHeight.setText("Height");

        cbBt.setText("BT(Boost)");

        cbMinHitRate.setText("MinHitRate");

        cbMaxFalseAlarmRate.setText("MaxFalseAlarmRate");

        cbWeightTrimRate.setText("WeightTrimRate");

        cbMaxDepth.setText("MaxDepth");

        cbMaxWeakCount.setText("MaxWeakCount");

        cbMode.setText("Mode");

        txtMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModeActionPerformed(evt);
            }
        });

        btnGenerateCommand.setText("Generate Command");
        btnGenerateCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateCommandActionPerformed(evt);
            }
        });

        btnRunCommand.setText("Run Command");
        btnRunCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunCommandActionPerformed(evt);
            }
        });

        txtAreaCommandOutput.setColumns(20);
        txtAreaCommandOutput.setRows(5);
        jScrollPane1.setViewportView(txtAreaCommandOutput);

        btnDataFileChooser.setText("...");
        btnDataFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataFileChooserActionPerformed(evt);
            }
        });

        btnVectorFileChooser.setText("...");
        btnVectorFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVectorFileChooserActionPerformed(evt);
            }
        });

        btnBackgroundFileChooser.setText("...");
        btnBackgroundFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackgroundFileChooserActionPerformed(evt);
            }
        });

        jLabel2.setText("Train Cascade");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbData)
                            .addComponent(cbVector)
                            .addComponent(cbNumberPos)
                            .addComponent(cbNumberNeg)
                            .addComponent(cbNumberStages)
                            .addComponent(cbPrecalcValBufSize)
                            .addComponent(cbPrecalcIdxBufSize)
                            .addComponent(cbStageType)
                            .addComponent(cbBaseFormatSave)
                            .addComponent(cbBackground)
                            .addComponent(jLabel2))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtData, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                            .addComponent(txtVector)
                            .addComponent(txtBackground)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtStageType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                .addComponent(txtBaseFormatSave, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPrecalcIdxBufSize, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtPrecalcValBufSize, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtNumberStages, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtNumberNeg, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtNumberPos, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnVectorFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDataFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBackgroundFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbFeatureType)
                            .addComponent(cbWidth)
                            .addComponent(cbHeight)
                            .addComponent(cbBt)
                            .addComponent(cbMinHitRate)
                            .addComponent(cbMaxFalseAlarmRate)
                            .addComponent(cbWeightTrimRate)
                            .addComponent(cbMaxDepth)
                            .addComponent(cbMode)
                            .addComponent(cbMaxWeakCount))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFeatureType, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                            .addComponent(txtWidth)
                            .addComponent(txtHeight)
                            .addComponent(txtBT)
                            .addComponent(txtMinHitRate)
                            .addComponent(txtMaxFalseAlarmRate)
                            .addComponent(txtWeightTrimRate)
                            .addComponent(txtMaxDepth)
                            .addComponent(txtMaxWeakCount)
                            .addComponent(txtMode))
                        .addGap(74, 74, 74))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGenerateCommand)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRunCommand)
                        .addGap(112, 112, 112))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbData)
                    .addComponent(cbFeatureType)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFeatureType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDataFileChooser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbVector)
                    .addComponent(cbWidth)
                    .addComponent(txtVector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVectorFileChooser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbBackground)
                    .addComponent(cbHeight)
                    .addComponent(txtBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBackgroundFileChooser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbNumberPos)
                    .addComponent(cbBt)
                    .addComponent(txtNumberPos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbNumberNeg)
                    .addComponent(cbMinHitRate)
                    .addComponent(txtNumberNeg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMinHitRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbNumberStages)
                    .addComponent(cbMaxFalseAlarmRate)
                    .addComponent(txtNumberStages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaxFalseAlarmRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbPrecalcValBufSize)
                    .addComponent(cbWeightTrimRate)
                    .addComponent(txtPrecalcValBufSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtWeightTrimRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbPrecalcIdxBufSize)
                    .addComponent(cbMaxDepth)
                    .addComponent(txtPrecalcIdxBufSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaxDepth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbBaseFormatSave)
                            .addComponent(cbMaxWeakCount)
                            .addComponent(txtMaxWeakCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbMode)
                            .addComponent(cbStageType)
                            .addComponent(txtStageType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txtBaseFormatSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerateCommand)
                    .addComponent(btnRunCommand))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModeActionPerformed

    private void btnGenerateCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateCommandActionPerformed
        // TODO add your handling code here:
        this.trainCascade();
    }//GEN-LAST:event_btnGenerateCommandActionPerformed

    private void btnRunCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunCommandActionPerformed
        // TODO add your handling code here:
        String command = this.txtAreaCommandOutput.getText();
        this.executeCommand(command);
    }//GEN-LAST:event_btnRunCommandActionPerformed

    private void btnDataFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataFileChooserActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(this.workingDirectory.getAbsolutePath());
        int r = fc.showOpenDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            this.txtData.setText(f.getAbsolutePath());
        }
        
    }//GEN-LAST:event_btnDataFileChooserActionPerformed

    private void btnVectorFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVectorFileChooserActionPerformed
        // TODO add your handling code here:
         JFileChooser fc = new JFileChooser(this.workingDirectory.getAbsolutePath());
        int r = fc.showOpenDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            this.txtVector.setText(f.getAbsolutePath());
        }
    }//GEN-LAST:event_btnVectorFileChooserActionPerformed

    private void btnBackgroundFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackgroundFileChooserActionPerformed
        // TODO add your handling code here:
         JFileChooser fc = new JFileChooser(this.workingDirectory.getAbsolutePath());
        int r = fc.showOpenDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            this.txtBackground.setText(f.getAbsolutePath());
        }
    }//GEN-LAST:event_btnBackgroundFileChooserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrainCascade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrainCascade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrainCascade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrainCascade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrainCascade().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackgroundFileChooser;
    private javax.swing.JButton btnDataFileChooser;
    private javax.swing.JButton btnGenerateCommand;
    private javax.swing.JButton btnRunCommand;
    private javax.swing.JButton btnVectorFileChooser;
    private javax.swing.JCheckBox cbBackground;
    private javax.swing.JCheckBox cbBaseFormatSave;
    private javax.swing.JCheckBox cbBt;
    private javax.swing.JCheckBox cbData;
    private javax.swing.JCheckBox cbFeatureType;
    private javax.swing.JCheckBox cbHeight;
    private javax.swing.JCheckBox cbMaxDepth;
    private javax.swing.JCheckBox cbMaxFalseAlarmRate;
    private javax.swing.JCheckBox cbMaxWeakCount;
    private javax.swing.JCheckBox cbMinHitRate;
    private javax.swing.JCheckBox cbMode;
    private javax.swing.JCheckBox cbNumberNeg;
    private javax.swing.JCheckBox cbNumberPos;
    private javax.swing.JCheckBox cbNumberStages;
    private javax.swing.JCheckBox cbPrecalcIdxBufSize;
    private javax.swing.JCheckBox cbPrecalcValBufSize;
    private javax.swing.JCheckBox cbStageType;
    private javax.swing.JCheckBox cbVector;
    private javax.swing.JCheckBox cbWeightTrimRate;
    private javax.swing.JCheckBox cbWidth;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAreaCommandOutput;
    private javax.swing.JTextField txtBT;
    private javax.swing.JTextField txtBackground;
    private javax.swing.JTextField txtBaseFormatSave;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtFeatureType;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtMaxDepth;
    private javax.swing.JTextField txtMaxFalseAlarmRate;
    private javax.swing.JTextField txtMaxWeakCount;
    private javax.swing.JTextField txtMinHitRate;
    private javax.swing.JTextField txtMode;
    private javax.swing.JTextField txtNumberNeg;
    private javax.swing.JTextField txtNumberPos;
    private javax.swing.JTextField txtNumberStages;
    private javax.swing.JTextField txtPrecalcIdxBufSize;
    private javax.swing.JTextField txtPrecalcValBufSize;
    private javax.swing.JTextField txtStageType;
    private javax.swing.JTextField txtVector;
    private javax.swing.JTextField txtWeightTrimRate;
    private javax.swing.JTextField txtWidth;
    // End of variables declaration//GEN-END:variables
    
    public void trainCascade() {
        this.cvCommand = new Command("opencv_traincascade");
        CvComm cc = new CvComm();
        if (cbBackground.isSelected()) {
            String val = txtBackground.getText();
            this.cvCommand.addParam(cc.bacground.setVal(val));
            
        }
        if (cbData.isSelected()) {
            String val = txtData.getText();
            this.cvCommand.addParam(cc.data.setVal(val));
        }
        
        if (cbHeight.isSelected()) {
            String val = txtHeight.getText();
            this.cvCommand.addParam(cc.height.setVal(val));
        }
        if (cbNumberNeg.isSelected()) {
            String val = txtNumberNeg.getText();
            this.cvCommand.addParam(cc.numNeg.setVal(val));
        }
        if (cbNumberPos.isSelected()) {
            String val = txtNumberPos.getText();
            this.cvCommand.addParam(cc.numPos.setVal(val));
        }
        if (cbNumberStages.isSelected()) {
            String val = txtNumberStages.getText();
            this.cvCommand.addParam(cc.numStages.setVal(val));
        }
        if (cbVector.isSelected()) {
            String val = txtVector.getText();
            this.cvCommand.addParam(cc.vector.setVal(val));
            
        }
        if (cbWidth.isSelected()) {
            String val = txtWidth.getText();
            this.cvCommand.addParam(cc.width.setVal(val));
        }
        if (cbPrecalcValBufSize.isSelected()) {
            String val = txtPrecalcValBufSize.getText();
            this.cvCommand.addParam(cc.precalcValBufSize.setVal(val));
        }
        if (cbPrecalcIdxBufSize.isSelected()) {
            String val = txtPrecalcIdxBufSize.getText();
            this.cvCommand.addParam(cc.precalcIdxBufSize.setVal(val));
        }
        if (cbBaseFormatSave.isSelected()) {
            String val = txtBaseFormatSave.getText();
            this.cvCommand.addParam(cc.baseFormatSave.setVal(val));
        }
        if (cbStageType.isSelected()) {
            String val = txtStageType.getText();
            this.cvCommand.addParam(cc.stageType.setVal(val));
        }
        if (cbFeatureType.isSelected()) {
            String val = txtFeatureType.getText();
            this.cvCommand.addParam(cc.featureType.setVal(val));
        }
        if (cbBt.isSelected()) {
            String val = txtBT.getText();
            this.cvCommand.addParam(cc.bt.setVal(val));
        }
        if (cbMinHitRate.isSelected()) {
            String val = txtMinHitRate.getText();
            this.cvCommand.addParam(cc.minHitRate.setVal(val));
        }
        if (cbMode.isSelected()) {
            String val = txtMode.getText();
            this.cvCommand.addParam(cc.mode.setVal(val));
        }
        if (cbMaxFalseAlarmRate.isSelected()) {
            String val = txtMaxFalseAlarmRate.getText();
            this.cvCommand.addParam(cc.maxFalseAlarmRate.setVal(val));
        }
        if (cbWeightTrimRate.isSelected()) {
            String val = txtWeightTrimRate.getText();
            this.cvCommand.addParam(cc.weightTrimRate.setVal(val));
        }
        if (cbMaxDepth.isSelected()) {
            String val = txtMaxDepth.getText();
            this.cvCommand.addParam(cc.maxDepth.setVal(val));
        }
        if (cbMaxWeakCount.isSelected()) {
            String val = txtMaxWeakCount.getText();
            this.cvCommand.addParam(cc.maxWeakCount.setVal(val));
        }
        
        this.txtAreaCommandOutput.setText(this.cvCommand.cmd);
    }
    
    class ComParam {
        
        String param;
        String value;
        
        public ComParam(String param, String value) {
            this.param = param;
            this.value = value;
        }
        
        public String toString() {
            return " " + this.param + " " + this.value;
        }
        
        public ComParam setVal(String val) {
            this.value = val;
            return this;
        }
    }
    
    class Command {
        
        String cmd;
        
        public Command(String command) {
            this.cmd = command;
        }
        
        public Command() {
        }
        
        public Command addParam(ComParam param) {
            if (param != null) {
                this.cmd = this.cmd + param.toString();
                return this;
            }
            return null;
        }
    }
    
    class CvComm {
        
        ComParam vector = new ComParam("-vec", "");
        ComParam bacground = new ComParam("-bg", "");
        ComParam width = new ComParam("-w", "");
        ComParam height = new ComParam("-h", "");
        ComParam numPos = new ComParam("-numPos", "");
        ComParam numNeg = new ComParam("-numNeg", "");
        ComParam data = new ComParam("-data", "");
        ComParam numStages = new ComParam("-numStages", "");
        ComParam precalcValBufSize = new ComParam("-precalcValBufSize", "");
        ComParam precalcIdxBufSize = new ComParam("-precalcIdxBufSize", "");
        ComParam baseFormatSave = new ComParam("-baseFormatSave", "");
        ComParam stageType = new ComParam("-stageType", "");
        ComParam featureType = new ComParam("-featureType", "");
        ComParam bt = new ComParam("-bt", "");
        ComParam minHitRate = new ComParam("-minHitRate", "");
        ComParam maxFalseAlarmRate = new ComParam("-maxFalseAlarmRate", "");
        ComParam weightTrimRate = new ComParam("-weightTrimRate", "");
        ComParam maxDepth = new ComParam("-maxDepth", "");
        ComParam maxWeakCount = new ComParam("-maxWeakCount", "");
        ComParam mode = new ComParam("-mode", "");
    }
    
    private String executeCommand(String command) {
        
        StringBuffer output = new StringBuffer();
        
        Process p;
        try {
            p = Runtime.getRuntime().exec(command);
            p.waitFor();
            BufferedReader reader
                    = new BufferedReader(new InputStreamReader(p.getInputStream()));
            
            String line = "";
            this.txtAreaCommandOutput.append("\n ============================ \nCommand Output: \n ============================ \n");
            while ((line = reader.readLine()) != null) {
                this.txtAreaCommandOutput.append(line + "\n");
                output.append(line + "\n");
            }
            this.txtAreaCommandOutput.append("============================");
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return output.toString();
    }
    
}
